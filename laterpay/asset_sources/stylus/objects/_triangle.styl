/**
 * Pure CSS triangle.
 *
 * Creates a visual triangle. Mixin takes the arguments ($size, $color, $direction).
 * @param The $size argument can take one or two values â€” width height.
 * @param The $color argument takes the color of the triangle.
 * @param $direction: up, down, left, or right.
 */

@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;

    $width: nth($size, 1);
    $height: nth($size, length($size));

    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
        $width: $width / 2;
        $height: if (length($size) > 1, $height, $height / 2);

        @if $direction == up {
            border-left: $width solid transparent;
            border-right: $width solid transparent;
            border-bottom: $height solid color;
        } @else if $direction == right {
            border-top: $width solid transparent;
            border-bottom: $width solid transparent;
            border-left: $height solid color;
        } @else if $direction == down {
            border-left: $width solid transparent;
            border-right: $width solid transparent;
            border-top: $height solid color;
        } @else if $direction == left {
            border-top: $width solid transparent;
            border-bottom: $width solid transparent;
            border-right: $height solid color;
        }
    }
}


%.lp_triangle {
    @include triangle(13px, $background--lightest, up);

    left: -13px;
    pointer-events: none;
    position: absolute;
    top: -10px;
    z-index: $z--elevated-2;
}

/* outline for upward-pointing arrow */
%.lp_outerTriangle {
    @include triangle(14px, $border, up);

    left: 50%;
    margin-left: -14px;
    top: -28px;
    z-index: $z--elevated-1;
}
